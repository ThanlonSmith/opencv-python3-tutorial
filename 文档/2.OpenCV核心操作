>@[toc]
##### 1. 图像的基本操作
本节中的几乎所有操作都主要与Numpy而不是OpenCV有关,要使用OpenCV编写更好的优化代码，需要Numpy的丰富知识。
###### 1.1 访问和修改像素值
需要加载的彩色图像给你准备好了，好看的妹妹噢：
![在这里插入图片描述](https://img-blog.csdnimg.cn/2020083011165933.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RoYW5sb24=,size_16,color_FFFFFF,t_70#)
加载彩色图像：
```py
import cv2 as cv
img = cv.imread('../images/u=2875076343,2172557877&fm=15&gp=0.jpg')
```
通过像素值的行和列坐标来访问它，对于BGR图像，它将返回一个蓝色、绿色、红色值的数组。对于灰度图像，仅返回相应的强度：
```py
import cv2 as cv

img = cv.imread('../images/u=2875076343,2172557877&fm=15&gp=0.jpg')
# 通过像素值的行和列坐标来访问图像
px = img[100, 100]
print(px)  # [243 245 253]
# 仅访问蓝色像素
blue = img[100, 100, 0]
print(blue)  # 243
```
可以用相同的方式修改像素值：
```py
import numpy as np
import cv2 as cv

img = cv.imread('../images/u=2875076343,2172557877&fm=15&gp=0.jpg')
# 通过像素值的行和列坐标来访问图像
px = img[100, 100]
print(px)  # [243 245 253]
# 仅访问蓝色像素
blue = img[100, 100, 0]
print(blue)  # 243
# 修改像素值
img[100, 100] = [255, 255, 255]
print(img[100, 100])  # [255 255 255]
```
>**`Numpy是用于快速数组计算的优化库。因此，简单地访问每个像素值并对其进行修改将非常缓慢，因此不建议使用。`**

上面的方法通常 **`用于选择数组的区域，例如前5行和后3列`**。对于单个像素访问，Numpy数组方法array.item（）和array.itemset()更好。它们总是返回标量，因此，如果要访问所有B，G，R值，则需要为每个值分别调用array.item()。更好的像素访问和编辑方法：
```py
import cv2 as cv

img = cv.imread('../images/u=2875076343,2172557877&fm=15&gp=0.jpg')
# 通过像素值的行和列坐标来访问图像
px = img[100, 100]
print(px)  # [243 245 253]
# 仅访问蓝色像素
blue = img[100, 100, 0]
print(blue)  # 243
# 修改像素值
img[100, 100] = [255, 255, 255]
print(img[100, 100])  # [255 255 255]
# 更好的像素访问和编辑方法
px = img.item(100, 100, 2)
print(px)  # 255
img.itemset((100, 100, 2), 100)
px = img.item(100, 100, 2)
print(px)  # 100
```
###### 1.2 访问图像属性
图像给你准备好了，好看的妹妹噢：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200830113131957.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RoYW5sb24=,size_16,color_FFFFFF,t_70#)
图像属性包括行数、列数和通道数；图像数据类型；像素数；等等

图像的形状可通过 **`img.shape`** 访问。它返回行、列和通道数的元组（如果图像是彩色的）：
```py
import cv2 as cv

img = cv.imread('../images/u=3126408186,2598873524&fm=15&gp=0.jpg')
# 图像的形状
print(img.shape)
"""
(400, 400, 3)
"""
```
>**`如果图像是灰度的，则返回的元组仅包含行数和列数，因此这是检查加载的图像是灰度还是彩色的好方法。`**

像素总数可以使用 **`img.size`**：
```py
import cv2 as cv

img = cv.imread('../images/u=3126408186,2598873524&fm=15&gp=0.jpg')
# 图像的形状
print(img.shape)
"""
(400, 400, 3)
"""
# 像素总数
print(img.size)
"""
480000
"""
```
图像数据类型通过 **`img.dtype`** 获得：
```py
import cv2 as cv

img = cv.imread('../images/u=3126408186,2598873524&fm=15&gp=0.jpg')
# 图像的形状
print(img.shape)
"""
(400, 400, 3)
"""
# 像素总数
print(img.size)
"""
480000
"""
# 图像数据类型
print(img.dtype)
"""
uint8
"""
```
##### 2. 图像上的算数运算

##### 3. 程序性能检测和优化

